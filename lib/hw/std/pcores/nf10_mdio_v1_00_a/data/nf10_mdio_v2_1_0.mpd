#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : nf10_mdio
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN nf10_mdio

## Peripheral Options
OPTION STYLE = HDL
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION USAGE_LEVEL = BASE_USER
OPTION RUN_NGCBUILD = TRUE
OPTION SYSLEVEL_DRC_PROC = check_syslevel_drcs
OPTION DESC = NetFPGA-10G MDIO Engine
OPTION LONG_DESC = 'NetFPGA-10G MDIO Engine'
OPTION IP_GROUP = Communication Low-Speed:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (virtex5lx=PRODUCTION, virtex5tx=PRODUCTION, spartan6t=PRE_PRODUCTION, spartan6=PRE_PRODUCTION, spartan6l=PRE_PRODUCTION, qspartan6t=PRE_PRODUCTION, qspartan6=PRE_PRODUCTION, aspartan6t=PRE_PRODUCTION, aspartan6=PRE_PRODUCTION, virtex6lx=PRE_PRODUCTION, virtex6sx=PRE_PRODUCTION, virtex6hx=PRE_PRODUCTION, virtex6cx=PRE_PRODUCTION, virtex6llx=PRE_PRODUCTION, virtex6lsx=PRE_PRODUCTION, qspartan6l=PRE_PRODUCTION, qvirtex6lx=PRE_PRODUCTION, qvirtex6sx=PRE_PRODUCTION, qvirtex6fx=PRE_PRODUCTION, qvirtex6tx=PRE_PRODUCTION)

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
IO_INTERFACE IO_IF = ethernet_0, IO_TYPE = XIL_AXIETHERNET_V1

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_PROTOCOL = AXI4, BUS = S_AXI, VALUES = (AXI4LITE=AXI4LITE, AXI4=AXI4)
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x02000, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_ACLK_PERIOD_PS = 10000, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = REQUIRE, IO_IS = clk_freq
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, RANGE = (1:16)
PARAMETER C_INCLUDE_MDIO = 1, DT = INTEGER, RANGE = (1)
PARAMETER C_INCLUDE_GLOBAL_BUFFERS = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (![xstrncmp C_FAMILY  spartan6 ])
PARAMETER C_INCLUDE_INTERNAL_LOOPBACK = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_DUPLEX = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_TX_PING_PONG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_RX_PING_PONG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_PHY_CONSTRAINTS = 1, DT = INTEGER, RANGE = (0,1), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 1, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 1, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING, INTERRUPT_PRIORITY = HIGH
PORT S_AXI_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WLAST = WLAST, DIR = I, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BID = BID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RID = RID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RLAST = RLAST, DIR = O, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT PHY_rst_n = "", DIR = O, SIGIS = RST
PORT PHY_MDC = "", DIR = O, PERMIT = BASE_USER, ISVALID = (C_INCLUDE_MDIO==1), ASSIGNMENT = REQUIRE, DESC = 'Ethernet PHY Management Clock', IO_IF = ethernet_0, IO_IS = ETH_MDC
PORT PHY_MDIO_I = "", DIR = I, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_I
PORT PHY_MDIO_O = "", DIR = O, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_O
PORT PHY_MDIO_T = "", DIR = O, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_T
PORT PHY_MDIO = "", DIR = IO, TRI_O = PHY_MDIO_O, TRI_T = PHY_MDIO_T, TRI_I = PHY_MDIO_I, THREE_STATE = TRUE, PERMIT = BASE_USER, ISVALID = (C_INCLUDE_MDIO==1), DESC = 'Ethernet PHY Management Data', IO_IF = ethernet_0, IO_IS = ETH_MDIO

END
