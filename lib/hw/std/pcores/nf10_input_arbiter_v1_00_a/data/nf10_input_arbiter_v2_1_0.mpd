#////////////////////////////////////////////////////////////////////////
#//
#//  NetFPGA-10G http://www.netfpga.org
#//
#//  Module:
#//          nf10_input_arbiter_v2_1_0.mpd
#//
#//  Description:
#//          Microprocessor Peripheral Description File
#//                 
#//  Revision history:
#//          2011/5/3 gcoving: Initial check-in
#//
#////////////////////////////////////////////////////////////////////////

BEGIN nf10_input_arbiter

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = Communication High-Speed:MICROBLAZE
OPTION DESC = NetFPGA-10G Input Arbiter
OPTION LONG_DESC = NetFPGA-10G Input Arbiter

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS_0, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXIS_1, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXIS_2, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXIS_3, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXIS_4, BUS_STD = AXIS, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PARAMETER C_S_AXIS_DATA_WIDTH = 64, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PORT axi_resetn = "", DIR = I, SIGIS = RST

PORT m_axis_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tstrb = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tuser = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS

PORT s_axis_tdata_0 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tstrb_0 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tuser_0 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tvalid_0 = TVALID, DIR = I, BUS = S_AXIS_0
PORT s_axis_tready_0 = TREADY, DIR = O, BUS = S_AXIS_0
PORT s_axis_tlast_0 = TLAST, DIR = I, BUS = S_AXIS_0

PORT s_axis_tdata_1 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tstrb_1 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tuser_1 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tvalid_1 = TVALID, DIR = I, BUS = S_AXIS_1
PORT s_axis_tready_1 = TREADY, DIR = O, BUS = S_AXIS_1
PORT s_axis_tlast_1 = TLAST, DIR = I, BUS = S_AXIS_1

PORT s_axis_tdata_2 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE
PORT s_axis_tstrb_2 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE
PORT s_axis_tuser_2 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE
PORT s_axis_tvalid_2 = TVALID, DIR = I, BUS = S_AXIS_2
PORT s_axis_tready_2 = TREADY, DIR = O, BUS = S_AXIS_2
PORT s_axis_tlast_2 = TLAST, DIR = I, BUS = S_AXIS_2

PORT s_axis_tdata_3 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE
PORT s_axis_tstrb_3 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE
PORT s_axis_tuser_3 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE
PORT s_axis_tvalid_3 = TVALID, DIR = I, BUS = S_AXIS_3
PORT s_axis_tready_3 = TREADY, DIR = O, BUS = S_AXIS_3
PORT s_axis_tlast_3 = TLAST, DIR = I, BUS = S_AXIS_3

PORT s_axis_tdata_4 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE
PORT s_axis_tstrb_4 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE
PORT s_axis_tuser_4 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE
PORT s_axis_tvalid_4 = TVALID, DIR = I, BUS = S_AXIS_4
PORT s_axis_tready_4 = TREADY, DIR = O, BUS = S_AXIS_4
PORT s_axis_tlast_4 = TLAST, DIR = I, BUS = S_AXIS_4

END
